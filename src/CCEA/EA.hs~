{-# OPTIONS -Wall #-}

module CCEA.EA
  (
    EA (..)
  , evolve
  , evolveN
  ) where


-- EA ::= Evolutionary algorithm
-- An evolutionary algorithm is parametarized by the type of its individuals and the type of
--  its fitness.
-- Each EA ha the population it works with, as well as the selection strategy, fitness function,
--  and breeding strategy
data EA i f = EA (Population i) (SelectionStrategy i f) (FitnessFunction i f) (BreedingStrategy i)
  
-- A selection strategy is a function that takes a list of individuals with a
-- score and outputs the selected surviving individuals
-- The output list will be half (integer division) the size of the input list
type SelectionStrategy i f = ([(i,f)] -> [i])

-- A fitness function (for an evolutionary algorithm) maps an individual to
-- its fitness value. 
type FitnessFunction i f   = (i -> f)

-- A Breeding strategy is a function for transforming a population into a mutated
-- one. It is assumed that the children will be exactly the same size as the original
type BreedingStrategy i    = (Population i -> Population i)

type Population i = [i]

-- There are three steps to evolutionary algorithms
-- 1) select best fit individuals for reproduction
-- 2) Breed new individuals
-- 3) Evaluate fitness of new individuals
-- 4) Replace least fit individuals

evolveN :: Int -> EA i f -> EA i f
evolveN 0 ea = ea
evolveN n ea = evolveN (n - 1) (evolve ea)

evolve :: EA i f -> EA i f
evolve (EA pop sel fit breed) = EA newPop sel fit breed
  where newPop = generation sel fit breed pop
  
generation :: SelectionStrategy i f -> FitnessFunction i f -> BreedingStrategy i  -> Population i -> Population i
generation select fitness breeding parents = let children   = breeding parents
                                                 pop        = children ++ parents
                                                 popWithFit = zip pop $ map fitness pop
                                             in select popWithFit

