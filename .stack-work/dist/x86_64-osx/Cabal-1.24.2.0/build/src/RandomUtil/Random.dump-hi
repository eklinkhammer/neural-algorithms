
==================== FINAL INTERFACE ====================
2017-02-12 01:36:45.345397 UTC

interface neural-algorithms-0.1.0.0-G4cKiu8m1A6JbAFI6F3DlP:RandomUtil.Random 8001
  interface hash: ac2d810cd6e06d24e4c0f7bd99a991c6
  ABI hash: d497c5f49863a2083ee76b325f494fdc
  export-list hash: dbc6485f6b0d59c92fc2ad3cabb52b6c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 45199ffd0676eef6e96592cf17da3a80
  sig of: Nothing
  used TH splices: False
  where
exports:
  RandomUtil.Random.addNormalNoise
  RandomUtil.Random.bernoulliBools
  RandomUtil.Random.randomBool
  RandomUtil.Random.randomMap
  RandomUtil.Random.randomMapTwoGens
  RandomUtil.Random.randomStream
  RandomUtil.Random.selectNRankProb
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      normaldistribution-1.1.0.3@normaldistribution-1.1.0.3-5Tmsx8i18mO3UhoQolUXZE
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe*
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Traversable 7ce5b7ee67475ac3d03ae825b86efd9f
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
import  -/  normaldistribution-1.1.0.3@normaldistribution-1.1.0.3-5Tmsx8i18mO3UhoQolUXZE:Data.Random.Normal fa80d6e1128999e1e36728d8d5ddbb48
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 33fad628288f84aac16d40e5a027af06
6b94c98de41715464782eb08523d8882
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   RandomUtil.Random.$trModule2
                   RandomUtil.Random.$trModule1) -}
4f2bc286b28825a702c3d81580d0de11
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "RandomUtil.Random"#) -}
ecd7a8acc2881d2b3b7b2817d557407e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "neural-algorithms-0.1.0.0-G4cKiu8m1A6JbAFI6F3DlP"#) -}
9754989ac7c4721aacb748cf82a02bb8
  $wbernoulliBools ::
    System.Random.RandomGen g =>
    g -> GHC.Types.Double -> (# g, [GHC.Types.Bool] #)
  {- Arity: 3,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ @ g
                   (w :: System.Random.RandomGen g)
                   (w1 :: g)
                   (w2 :: GHC.Types.Double) ->
                 letrec {
                   $wxs :: g -> (# g, [GHC.Types.Bool] #)
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ (w3 :: g) ->
                     let {
                       ds :: (GHC.Types.Double, g)
                       = case System.Random.$wrandomIvalInteger
                                @ g
                                @ GHC.Int.Int64
                                w
                                GHC.Int.$fNumInt64
                                System.Random.$fRandomCIntMax4
                                System.Random.$fRandomCIntMax3
                                w3 of ww { (#,#) ww1 ww2 ->
                         (case System.Random.$fRandomDouble4 of wild { GHC.Int.I64# x# ->
                          case ww1 of wild1 { GHC.Int.I64# y# ->
                          case System.Random.$fRandomDouble3 of wild2 { GHC.Types.D# y ->
                          case GHC.Prim./##
                                 (GHC.Prim.int2Double#
                                    (GHC.Prim.word2Int#
                                       (GHC.Prim.and#
                                          (GHC.Prim.int2Word# x#)
                                          (GHC.Prim.int2Word# y#))))
                                 y of wild3 { DEFAULT ->
                          GHC.Types.D# wild3 } } } },
                          ww2) }
                     } in
                     let {
                       ds3 :: (g, [GHC.Types.Bool])
                       = case $wxs
                                (case ds of wild { (,) val g' -> g' }) of ww { (#,#) ww1 ww2 ->
                         (ww1, ww2) }
                     } in
                     (# case ds3 of wild { (,) s'' v -> s'' },
                        GHC.Types.:
                          @ GHC.Types.Bool
                          (case ds of wild { (,) val g' ->
                           case val of wild1 { GHC.Types.D# x ->
                           case w2 of wild2 { GHC.Types.D# y ->
                           GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<## x y) } } })
                          (case ds3 of wild1 { (,) s'' v -> v }) #)
                 } in
                 $wxs w1) -}
015dacb32c55458f155f02d28bb7d8c4
  $wrandomBool ::
    System.Random.RandomGen g =>
    g -> GHC.Types.Double -> (# g, GHC.Types.Bool #)
  {- Arity: 3,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ @ g
                   (w :: System.Random.RandomGen g)
                   (w1 :: g)
                   (w2 :: GHC.Types.Double) ->
                 let {
                   ds :: (GHC.Types.Double, g)
                   = case System.Random.$wrandomIvalInteger
                            @ g
                            @ GHC.Int.Int64
                            w
                            GHC.Int.$fNumInt64
                            System.Random.$fRandomCIntMax4
                            System.Random.$fRandomCIntMax3
                            w1 of ww { (#,#) ww1 ww2 ->
                     (case System.Random.$fRandomDouble4 of wild { GHC.Int.I64# x# ->
                      case ww1 of wild1 { GHC.Int.I64# y# ->
                      case System.Random.$fRandomDouble3 of wild2 { GHC.Types.D# y ->
                      case GHC.Prim./##
                             (GHC.Prim.int2Double#
                                (GHC.Prim.word2Int#
                                   (GHC.Prim.and# (GHC.Prim.int2Word# x#) (GHC.Prim.int2Word# y#))))
                             y of wild3 { DEFAULT ->
                      GHC.Types.D# wild3 } } } },
                      ww2) }
                 } in
                 (# case ds of wild { (,) val g' -> g' },
                    case ds of wild { (,) val g' ->
                    case val of wild1 { GHC.Types.D# x ->
                    case w2 of wild2 { GHC.Types.D# y ->
                    GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.<## x y) } } } #)) -}
d0e4524aadad5092df50955ff31e2199
  $wrandomMap :: (g -> a -> (b, g)) -> g -> [a] -> (# [b], g #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><S,1*U>, Inline: [0] -}
b0cd8ea997b1e79bf8517643a09fb68a
  $wrandomMapTwoGens ::
    (g -> g -> a -> (b, (g, g))) -> g -> g -> [a] -> (# [b], (g, g) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(U(U,1*U(U,U)))))><L,U><L,U><S,1*U>,
     Inline: [0] -}
2464219ca3fe9e2891e845da5cb8d0bc
  $wselectNRankProb ::
    System.Random.RandomGen g =>
    GHC.Prim.Int# -> g -> [a] -> (# [a], g #)
  {- Arity: 4,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><S,1*U><L,U><L,U>,
     Inline: [0] -}
81b6d52365d53416a5cb2233476bc1c4
  type Mean = GHC.Types.Double
dcf4d0ddf797454300ea409696275c02
  type Prob = GHC.Types.Double
37ba794aacca4632523254e73aa0c67c
  type Probs = [RandomUtil.Random.Prob]
12f2cd29929bc8e6412beae720354911
  type Sigma = GHC.Types.Double
fe635977f495889dd0eed7ef47ec33ad
  addNormalNoise ::
    System.Random.RandomGen g =>
    RandomUtil.Random.Mean
    -> RandomUtil.Random.Sigma
    -> g
    -> GHC.Types.Double
    -> (g, GHC.Types.Double)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ g
                   (w :: System.Random.RandomGen g)
                   (w1 :: RandomUtil.Random.Mean)
                   (w2 :: RandomUtil.Random.Sigma)
                   (w3 :: g)
                   (w4 :: GHC.Types.Double) ->
                 let {
                   ds :: (RandomUtil.Random.Mean, g)
                   = case Data.Random.Normal.$wnormal'
                            @ g
                            @ RandomUtil.Random.Mean
                            w
                            System.Random.$fRandomDouble
                            GHC.Float.$fFloatingDouble
                            w1
                            w2
                            w3 of ww3 { (#,#) ww4 ww5 ->
                     (ww4, ww5) }
                 } in
                 (case ds of wild { (,) sample g' -> g' },
                  case w4 of wild { GHC.Types.D# x ->
                  case ds of wild1 { (,) sample g' ->
                  case sample of wild2 { GHC.Types.D# y ->
                  GHC.Types.D# (GHC.Prim.+## x y) } } })) -}
dfa32879f6710727e0135b3900968859
  bernoulliBools ::
    System.Random.RandomGen g =>
    g -> GHC.Types.Double -> (g, [GHC.Types.Bool])
  {- Arity: 3,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,U><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ g
                   (w :: System.Random.RandomGen g)
                   (w1 :: g)
                   (w2 :: GHC.Types.Double) ->
                 case RandomUtil.Random.$wbernoulliBools
                        @ g
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
8aba392cc2b839e991ca82e9502f06e5
  randomBool ::
    System.Random.RandomGen g =>
    g -> GHC.Types.Double -> (g, GHC.Types.Bool)
  {- Arity: 3,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,U><L,1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ g
                   (w :: System.Random.RandomGen g)
                   (w1 :: g)
                   (w2 :: GHC.Types.Double) ->
                 case RandomUtil.Random.$wrandomBool
                        @ g
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d9d7bd4ff06d98d322dee7d8f9d0c582
  randomMap :: (g -> a -> (b, g)) -> g -> [a] -> ([b], g)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ g @ a @ b (w :: g -> a -> (b, g)) (w1 :: g) (w2 :: [a]) ->
                 case RandomUtil.Random.$wrandomMap
                        @ g
                        @ a
                        @ b
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
7bb9941d61a614a53cb84082a26d5435
  randomMapTwoGens ::
    (g -> g -> a -> (b, (g, g))) -> g -> g -> [a] -> ([b], (g, g))
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(U(U,1*U(U,U)))))><L,U><L,U><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ g
                   @ a
                   @ b
                   (w :: g -> g -> a -> (b, (g, g)))
                   (w1 :: g)
                   (w2 :: g)
                   (w3 :: [a]) ->
                 case RandomUtil.Random.$wrandomMapTwoGens
                        @ g
                        @ a
                        @ b
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
e81408d5ea6d2a29756ec3bf0e3bffcb
  randomStream ::
    System.Random.RandomGen g => g -> [GHC.Types.Double]
  {- Arity: 2, Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,U>,
     Unfolding: (\ @ g
                   ($dRandomGen :: System.Random.RandomGen g)
                   (g1 :: g) ->
                 letrec {
                   $wgo :: [GHC.Integer.Type.Integer]
                           -> g -> (# g, [GHC.Types.Double] #)
                     {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                   = \ (w :: [GHC.Integer.Type.Integer]) (w1 :: g) ->
                     case w of wild {
                       [] -> (# w1, GHC.Types.[] @ GHC.Types.Double #)
                       : y ys
                       -> let {
                            ds :: (GHC.Types.Double, g)
                            = case System.Random.$wrandomIvalInteger
                                     @ g
                                     @ GHC.Int.Int64
                                     $dRandomGen
                                     GHC.Int.$fNumInt64
                                     System.Random.$fRandomCIntMax4
                                     System.Random.$fRandomCIntMax3
                                     w1 of ww { (#,#) ww1 ww2 ->
                              (case System.Random.$fRandomDouble4 of wild1 { GHC.Int.I64# x# ->
                               case ww1 of wild2 { GHC.Int.I64# y# ->
                               case System.Random.$fRandomDouble3 of wild3 { GHC.Types.D# y1 ->
                               case GHC.Prim./##
                                      (GHC.Prim.int2Double#
                                         (GHC.Prim.word2Int#
                                            (GHC.Prim.and#
                                               (GHC.Prim.int2Word# x#)
                                               (GHC.Prim.int2Word# y#))))
                                      y1 of wild4 { DEFAULT ->
                               GHC.Types.D# wild4 } } } },
                               ww2) }
                          } in
                          let {
                            ds3 :: (g, [GHC.Types.Double])
                            = case $wgo
                                     ys
                                     (case ds of wild1 { (,) x g' -> g' }) of ww { (#,#) ww1 ww2 ->
                              (ww1, ww2) }
                          } in
                          (# case ds3 of wild1 { (,) s'' v -> s'' },
                             GHC.Types.:
                               @ GHC.Types.Double
                               (case ds of wild1 { (,) x g' -> x })
                               (case ds3 of wild1 { (,) s'' v -> v }) #) }
                 } in
                 case $wgo
                        RandomUtil.Random.randomStream1
                        g1 of ww { (#,#) ww1 ww2 ->
                 ww2 }) -}
65107513b265e26420cfa1a4c0dc343c
  randomStream1 :: [GHC.Integer.Type.Integer]
  {- Unfolding: (case GHC.Enum.$wenumDeltaInteger
                        RandomUtil.Random.randomStream2
                        RandomUtil.Random.randomStream2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Integer.Type.Integer ww1 ww2 }) -}
babf79b87e7ad3f56cf5deebffc72e2e
  randomStream2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
eec256f8a5a814dedf59b0b31a9f0513
  selectNRankProb ::
    System.Random.RandomGen g => GHC.Types.Int -> g -> [a] -> ([a], g)
  {- Arity: 4,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><S(S),1*U(1*U)><L,U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ g
                   @ a
                   (w :: System.Random.RandomGen g)
                   (w1 :: GHC.Types.Int)
                   (w2 :: g)
                   (w3 :: [a]) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case RandomUtil.Random.$wselectNRankProb
                        @ g
                        @ a
                        w
                        ww1
                        w2
                        w3 of ww2 { (#,#) ww3 ww4 ->
                 (ww3, ww4) } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

