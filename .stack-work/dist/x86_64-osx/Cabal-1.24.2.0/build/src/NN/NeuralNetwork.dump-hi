
==================== FINAL INTERFACE ====================
2017-02-12 01:36:00.607369 UTC

interface neural-algorithms-0.1.0.0-G4cKiu8m1A6JbAFI6F3DlP:NN.NeuralNetwork 8001
  interface hash: d28705459de76af47c37ed639838daf5
  ABI hash: a7e929c67c58528fd2ec928049b637dc
  export-list hash: 3dbcf85690c4c5036042d02a36607d18
  orphan hash: 49780e14d4be3c84a323176d3f101f8e
  flag hash: 34af92ddec629e2403fad3676ddb0e6e
  sig of: Nothing
  used TH splices: False
  where
exports:
  NN.NeuralNetwork.createNetworkW
  AI.HNN.FF.Network.Network{AI.HNN.FF.Network.Network matrices}
  NN.NeuralNetwork.NN{NN.NeuralNetwork.create NN.NeuralNetwork.get NN.NeuralNetwork.getWeights NN.NeuralNetwork.randomize NN.NeuralNetwork.train NN.NeuralNetwork.trainV}
  NN.NeuralNetwork.NNVars
module dependencies: Matrix.Traversable RandomUtil.Random
                     Util.Tuples Util.Vars
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ
                      hnn-0.3@hnn-0.3-FFj4by4N6nNKK66rtK9l9v integer-gmp-1.0.0.1
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      mwc-random-0.13.5.0@mwc-random-0.13.5.0-9fVrEibWMFm8DwR7HO0MWX
                      normaldistribution-1.1.0.3@normaldistribution-1.1.0.3-5Tmsx8i18mO3UhoQolUXZE
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3
                      zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.CG
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Element
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Util
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Vector
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Numeric.Matrix
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Numeric.Vector
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Devel
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Matrix
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Modular
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Numeric
                         mwc-random-0.13.5.0@mwc-random-0.13.5.0-9fVrEibWMFm8DwR7HO0MWX:System.Random.MWC
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV:Codec.Compression.Zlib.Stream
import  -/  base-4.9.0.0:Data.Traversable 7ce5b7ee67475ac3d03ae825b86efd9f
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Float 469226b1bc53433e95d0167dec5d0312
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Matrix 515b660ee5ee78b11c9f17f31995b4f9
import  -/  hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Numeric.LinearAlgebra.HMatrix 4e354b7f55efceb1e6739fbf94a43aaa
import  -/  hnn-0.3@hnn-0.3-FFj4by4N6nNKK66rtK9l9v:AI.HNN.FF.Network be8ad76dc33479d08136c3d1edf8aa27
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader 859b39f57eb3bed457106c30aac21473
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader.Class 8046d4d7c28bbf9d539af876e6134287
import  -/  Matrix.Traversable 197368ca3b521fa6f643382626493e12
  exports: ff795e468825fbc1c4519054d95118d2
  matrixTraverse ec4f85f1d4865a9f22dbb5ba986f4120
import  -/  RandomUtil.Random d497c5f49863a2083ee76b325f494fdc
  exports: dbc6485f6b0d59c92fc2ad3cabb52b6c
  addNormalNoise fe635977f495889dd0eed7ef47ec33ad
import  -/  Util.Vars ae34b4bc4b0c13f5e1a6e94379df191d
  exports: 6c44af7536618ed06fd600cf48747aa2
  Vars cf8e2f79b65eb1da7e48dba3e62c269d
  getVar 10013d272dd7f63357c4d0b859ac2b8e
  learningRateS 1af4da926a1b6bdcf9270642b2a041b2
  meanS 3fa6628686ea37d3c582788c0b65db7c
  mutationRate 1cb993a4fd9981500fb852608975c546
  numberHiddenS 64dadf2821170843203039c3bdd5cf3d
  numberInputsS 61d0ea7217b7100ee30ae8b613704048
  numberOutputsS a14569dacf2eedb9fa39f17a203b670d
  sigmoidTanS fa8970c6cdf2c101e840a9d2e774428e
  stddevS fb84e2ea58c53a051bf986664c11952f
  timesToTrainS ded31e80dcc050397c2b4d3fe92a1afa
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 33fad628288f84aac16d40e5a027af06
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader e4096b104cf1a0df8752e81669ef6a24
import  -/  vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector c1e986e414fb06d8c78b2ec9a85e2dfc
import  -/  vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Storable 8654c53df20dc1a97095be9c331f0e9b
c5868fa3031ece620006d64c3f99625a
  $dmtrain ::
    NN.NeuralNetwork.NN n =>
    NN.NeuralNetwork.NNVars
    -> n -> AI.HNN.FF.Network.Sample GHC.Types.Double -> n
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLC(C(C(S)))LL),1*U(A,A,A,1*C1(C1(C1(U))),A,A)><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ n
                   ($dNN :: NN.NeuralNetwork.NN n)
                   (vars :: NN.NeuralNetwork.NNVars)
                   (net :: n)
                   (samp :: AI.HNN.FF.Network.Sample GHC.Types.Double) ->
                 NN.NeuralNetwork.trainV
                   @ n
                   $dNN
                   vars
                   net
                   (GHC.Base.build
                      @ (AI.HNN.FF.Network.Sample GHC.Types.Double)
                      (\ @ a
                         (c :: AI.HNN.FF.Network.Sample GHC.Types.Double -> a -> a)[OneShot]
                         (n1 :: a)[OneShot] ->
                       c samp n1))) -}
c79f29a410ebe4ea871978a29f7af3e8
  $fNNNetwork ::
    NN.NeuralNetwork.NN (AI.HNN.FF.Network.Network GHC.Types.Double)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (AI.HNN.FF.Network.Network GHC.Types.Double)
                  NN.NeuralNetwork.createNetworkW
                  NN.NeuralNetwork.$fNNNetwork_$cget
                  NN.NeuralNetwork.$fNNNetwork_$ctrain
                  NN.NeuralNetwork.$fNNNetwork_$ctrainV
                  NN.NeuralNetwork.$fNNNetwork_$crandomize
                  NN.NeuralNetwork.$fNNNetwork_$cgetWeights -}
75b9527dc863acda432599edfd6c35fa
  $fNNNetwork1 ::
    AI.HNN.FF.Network.Network GHC.Types.Double
    -> AI.HNN.FF.Network.Network GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: AI.HNN.FF.Network.Network GHC.Types.Double) -> ds) -}
12b5681c27e281ea8e8c52c7ed54b1e3
  $fNNNetwork2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
5c4001bbea87633cd81e8b16848502ca
  $fNNNetwork3 :: [Data.Vector.Storable.Vector GHC.Types.Double]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Vector.Storable.Vector GHC.Types.Double)
                   NN.NeuralNetwork.$fNNNetwork4
                   (GHC.Types.[] @ (Data.Vector.Storable.Vector GHC.Types.Double))) -}
ba7662951ee025f68d892bd3d606024d
  $fNNNetwork4 :: Data.Vector.Storable.Vector GHC.Types.Double
  {- Unfolding: (Numeric.Vector.$fNumVector16
                   NN.NeuralNetwork.$fNNNetwork5) -}
cadd62da93bce83e0ee63a04ba8797e1
  $fNNNetwork5 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   NN.NeuralNetwork.$fNNNetwork6
                   (GHC.Types.[] @ GHC.Types.Double)) -}
fe9078f4e600b24a07e05c9df9ef63a4
  $fNNNetwork6 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 1.0##) -}
c5d3788742865c0d3ad6dcf1b296ae4b
  $fNNNetwork_$cget ::
    NN.NeuralNetwork.NNVars
    -> AI.HNN.FF.Network.Network GHC.Types.Double
    -> Data.Vector.Storable.Vector GHC.Types.Double
    -> Data.Vector.Storable.Vector GHC.Types.Double
  {- Arity: 3, Strictness: <L,1*U><S(LSL),1*U(U,U,U)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: NN.NeuralNetwork.NNVars)
                   (w1 :: AI.HNN.FF.Network.Network GHC.Types.Double)
                   (w2 :: Data.Vector.Storable.Vector GHC.Types.Double) ->
                 case w1
                        `cast`
                      (AI.HNN.FF.Network.N:Network[0]
                           <GHC.Types.Double>_P) of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case NN.NeuralNetwork.$w$cget
                        w
                        ww1
                        ww2
                        ww3
                        w2 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Data.Vector.Storable.Vector @ GHC.Types.Double ww5 ww6 ww7 } }) -}
60dd81a4d7978789d497cef4fef66b5a
  $fNNNetwork_$cgetWeights ::
    AI.HNN.FF.Network.Network GHC.Types.Double
    -> Data.Vector.Vector (Internal.Matrix.Matrix GHC.Types.Double)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                NN.NeuralNetwork.$fNNNetwork1
                  `cast`
                (<AI.HNN.FF.Network.Network GHC.Types.Double>_R
                 ->_R AI.HNN.FF.Network.N:Network[0] <GHC.Types.Double>_P) -}
b2b2d6b22d0c17397b9c34183353e00b
  $fNNNetwork_$crandomize ::
    System.Random.RandomGen g =>
    NN.NeuralNetwork.NNVars
    -> g
    -> AI.HNN.FF.Network.Network GHC.Types.Double
    -> (g, AI.HNN.FF.Network.Network GHC.Types.Double)
  {- Arity: 4, Strictness: <L,U(U,U,U)><L,U><L,U><L,1*U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ g
                   (w :: System.Random.RandomGen g)
                   (w1 :: NN.NeuralNetwork.NNVars)
                   (w2 :: g)
                   (w3 :: AI.HNN.FF.Network.Network GHC.Types.Double) ->
                 case NN.NeuralNetwork.$w$crandomize
                        @ g
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
cac13f66a92eb43a1c8a1b4a1380ea4d
  $fNNNetwork_$ctrain ::
    NN.NeuralNetwork.NNVars
    -> AI.HNN.FF.Network.Network GHC.Types.Double
    -> AI.HNN.FF.Network.Sample GHC.Types.Double
    -> AI.HNN.FF.Network.Network GHC.Types.Double
  {- Arity: 3, Strictness: <S,U><S,1*U(U,U,U)><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ (vars :: NN.NeuralNetwork.NNVars)
                   (net :: AI.HNN.FF.Network.Network GHC.Types.Double)
                   (samp :: AI.HNN.FF.Network.Sample GHC.Types.Double) ->
                 NN.NeuralNetwork.$fNNNetwork_$ctrainV
                   vars
                   net
                   (GHC.Types.:
                      @ (AI.HNN.FF.Network.Sample GHC.Types.Double)
                      samp
                      (GHC.Types.[] @ (AI.HNN.FF.Network.Sample GHC.Types.Double)))) -}
39d92eb6ef6433d16b5ca593474815d1
  $fNNNetwork_$ctrainV ::
    NN.NeuralNetwork.NNVars
    -> AI.HNN.FF.Network.Network GHC.Types.Double
    -> AI.HNN.FF.Network.Samples GHC.Types.Double
    -> AI.HNN.FF.Network.Network GHC.Types.Double
  {- Arity: 3, Strictness: <S,U><S,1*U(U,U,U)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: NN.NeuralNetwork.NNVars)
                   (w1 :: AI.HNN.FF.Network.Network GHC.Types.Double)
                   (w2 :: AI.HNN.FF.Network.Samples GHC.Types.Double) ->
                 case w1
                        `cast`
                      (AI.HNN.FF.Network.N:Network[0]
                           <GHC.Types.Double>_P) of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case NN.NeuralNetwork.$w$ctrainV
                        w
                        ww1
                        ww2
                        ww3
                        w2 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 (Data.Vector.Vector
                    @ (Internal.Matrix.Matrix GHC.Types.Double)
                    ww5
                    ww6
                    ww7)
                   `cast`
                 (Sym (AI.HNN.FF.Network.N:Network[0] <GHC.Types.Double>_P)) } }) -}
c0e5c0efc85d18ecdfb2807a44fa749a
  $fNNNetwork_$ssigmoid :: GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (eta :: GHC.Types.Double) ->
                 case eta of x { GHC.Types.D# ipv ->
                 GHC.Float.$fFractionalDouble_$c/
                   (GHC.Types.D# 1.0##)
                   (GHC.Float.$fNumDouble_$c+
                      (GHC.Types.D# 1.0##)
                      (GHC.Float.$fFloatingDouble_$cexp
                         (GHC.Float.$fNumDouble_$cnegate x))) }) -}
1ed1517059a18cfa6e0d807095aa1fa8
  $fNNNetwork_$ssigmoid' :: GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (eta :: GHC.Types.Double) ->
                 case eta of x { GHC.Types.D# ipv ->
                 let {
                   s :: GHC.Types.Double
                   = GHC.Float.$fFractionalDouble_$c/
                       (GHC.Types.D# 1.0##)
                       (GHC.Float.$fNumDouble_$c+
                          (GHC.Types.D# 1.0##)
                          (GHC.Float.$fFloatingDouble_$cexp
                             (GHC.Float.$fNumDouble_$cnegate x)))
                 } in
                 GHC.Float.$fNumDouble_$c*
                   s
                   (GHC.Float.$fNumDouble_$c- (GHC.Types.D# 1.0##) s) }) -}
534b55c82830a9650bfc6a5ef53e6054
  $fNNNetwork_$stanh' :: GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (eta :: GHC.Types.Double) ->
                 case eta of x { GHC.Types.D# ipv ->
                 GHC.Float.$fNumDouble_$c-
                   (GHC.Types.D# 1.0##)
                   (GHC.Float.$fFloatingDouble_$c**
                      (GHC.Float.$fFloatingDouble_$ctanh x)
                      (GHC.Types.D# 2.0##)) }) -}
263fd25ae1a2cc513cfc60b4a6d0b86a
  $sinit_$slength ::
    Data.Vector.Vector (Data.Vector.Storable.Vector GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: [NEVER] -}
00174d9fa22c4df6c3665d19d8e9c864
  $slength ::
    Data.Vector.Vector
      (Data.Vector.Storable.Vector GHC.Types.Double,
       Internal.Matrix.Matrix GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: [NEVER] -}
5d0827a673400ccd2231b08cbab1ae98
  $tc'C:NN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3648439317963241621##
                   3139092412696161426##
                   NN.NeuralNetwork.$trModule
                   NN.NeuralNetwork.$tc'C:NN1) -}
f931bd2304044e941d1e5d5e3b26f421
  $tc'C:NN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:NN"#) -}
a41ad7ec2551e56e2a46f98eaae92793
  $tcNN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11539432377132172521##
                   926684637196341284##
                   NN.NeuralNetwork.$trModule
                   NN.NeuralNetwork.$tcNN1) -}
b3daecd32b5486faa63019d611d306f2
  $tcNN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NN"#) -}
92d2bec5512599e695d322f196761207
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   NN.NeuralNetwork.$trModule2
                   NN.NeuralNetwork.$trModule1) -}
b16c9e9dc7a918f7158290922fd2f2db
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NN.NeuralNetwork"#) -}
4e6f81a9aec9e5e5b8792a7c7eb193a8
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "neural-algorithms-0.1.0.0-G4cKiu8m1A6JbAFI6F3DlP"#) -}
dc2ce27c15c82b10711221ef0f225cf8
  $w$cget ::
    NN.NeuralNetwork.NNVars
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Internal.Matrix.Matrix GHC.Types.Double)
    -> Data.Vector.Storable.Vector GHC.Types.Double
    -> (# GHC.Prim.Int#, GHC.Prim.Addr#,
          GHC.ForeignPtr.ForeignPtrContents #)
  {- Arity: 5, Strictness: <L,1*U><L,U><S,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: NN.NeuralNetwork.NNVars)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# (Internal.Matrix.Matrix GHC.Types.Double))
                   (w1 :: Data.Vector.Storable.Vector GHC.Types.Double) ->
                 case Internal.Vector.vjoin
                        @ GHC.Types.Double
                        Foreign.Storable.$fStorableDouble
                        (GHC.Types.:
                           @ (Data.Vector.Storable.Vector GHC.Types.Double)
                           w1
                           NN.NeuralNetwork.$fNNNetwork3) of ww3 { Data.Vector.Storable.Vector ww4 ww5 ww6 ->
                 let {
                   eta1 :: AI.HNN.FF.Network.ActivationFunction GHC.Types.Double
                   = case Util.Vars.$slookup1
                            @ GHC.Types.Double
                            Util.Vars.sigmoidTanS
                            w of wild {
                       GHC.Base.Nothing
                       -> case Data.Maybe.fromJust1
                          ret_ty (AI.HNN.FF.Network.ActivationFunction GHC.Types.Double)
                          of {}
                       GHC.Base.Just x
                       -> case x of ww7 { GHC.Types.D# ww8 ->
                          case NN.NeuralNetwork.$w$sgetActivationFunctions
                                 ww8 of ww9 { (#,#) ww10 ww11 ->
                          ww10 } } }
                 } in
                 letrec {
                   $wfoldlM'_loop :: GHC.Types.SPEC
                                     -> GHC.Prim.Int#
                                     -> GHC.Prim.Addr#
                                     -> GHC.ForeignPtr.ForeignPtrContents
                                     -> GHC.Prim.Int#
                                     -> (# GHC.Prim.Int#, GHC.Prim.Addr#,
                                           GHC.ForeignPtr.ForeignPtrContents #)
                     {- Arity: 5, Strictness: <S,1*U><L,U><L,U><L,U><S,U>,
                        Inline: [0] -}
                   = \ (w2 :: GHC.Types.SPEC)
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Addr#)
                       (ww9 :: GHC.ForeignPtr.ForeignPtrContents)
                       (ww10 :: GHC.Prim.Int#) ->
                     case w2 of ds5 { DEFAULT ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww10 ww1) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Internal.Matrix.Matrix GHC.Types.Double)
                                 ww2
                                 (GHC.Prim.+# ww ww10) of ds2 { Unit# ipv ->
                          case Internal.Numeric.$wmXv
                                 @ GHC.Types.Double
                                 Internal.Numeric.$fProductDouble
                                 ipv
                                 (Data.Vector.Storable.Vector
                                    @ GHC.Types.Double
                                    ww7
                                    ww8
                                    ww9) of ww11 { (#,,#) ww12 ww13 ww14 ->
                          case Internal.Numeric.$w$ccmap'5
                                 @ GHC.Types.Double
                                 Internal.Matrix.$fElementDouble
                                 eta1
                                 ww12
                                 ww13
                                 ww14 of ww15 { Data.Vector.Storable.Vector ww16 ww17 ww18 ->
                          $wfoldlM'_loop
                            GHC.Types.SPEC
                            ww16
                            ww17
                            ww18
                            (GHC.Prim.+# ww10 1#) } } }
                       GHC.Types.True -> (# ww7, ww8, ww9 #) } }
                 } in
                 $wfoldlM'_loop GHC.Types.SPEC ww4 ww5 ww6 0# }) -}
b574baa2900fffa37729176d35b3d615
  $w$crandomize ::
    System.Random.RandomGen g =>
    NN.NeuralNetwork.NNVars
    -> g
    -> AI.HNN.FF.Network.Network GHC.Types.Double
    -> (# g, AI.HNN.FF.Network.Network GHC.Types.Double #)
  {- Arity: 4, Strictness: <L,U(U,U,U)><L,U><L,U><L,1*U(U,U,U)>,
     Inline: [0] -}
68f05b759387cc97d5f75f7f3b416e5e
  $w$ctrainV ::
    NN.NeuralNetwork.NNVars
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Internal.Matrix.Matrix GHC.Types.Double)
    -> AI.HNN.FF.Network.Samples GHC.Types.Double
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Array# (Internal.Matrix.Matrix GHC.Types.Double) #)
  {- Arity: 5, Strictness: <S,U><L,U><L,U><L,U><L,U>, Inline: [0] -}
ff0ed14648a4bb9c09f5b938c529d139
  $w$sgetActivationFunctions ::
    GHC.Prim.Double#
    -> (# AI.HNN.FF.Network.ActivationFunction GHC.Types.Double,
          AI.HNN.FF.Network.ActivationFunctionDerivative GHC.Types.Double #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case {__pkg_ccall base-4.9.0.0 rintDouble GHC.Prim.Double#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Prim.Double# #)}
                        ww
                        GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                 case GHC.Integer.Type.decodeDoubleInteger
                        ds4 of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ipv1 0#) of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.eqInteger#
                             (GHC.Integer.Type.shiftLInteger ipv ipv1)
                             NN.NeuralNetwork.$fNNNetwork2 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False
                        -> (# GHC.Float.tanhDouble, NN.NeuralNetwork.$fNNNetwork_$stanh' #)
                        GHC.Types.True
                        -> (# NN.NeuralNetwork.$fNNNetwork_$ssigmoid,
                              NN.NeuralNetwork.$fNNNetwork_$ssigmoid' #) } }
                   GHC.Types.True
                   -> case GHC.Integer.Type.integerToInt ipv of n { DEFAULT ->
                      case GHC.Integer.Type.eqInteger#
                             (GHC.Integer.Type.smallInteger
                                (GHC.Prim.uncheckedIShiftRA# n (GHC.Prim.negateInt# ipv1)))
                             NN.NeuralNetwork.$fNNNetwork2 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False
                        -> (# GHC.Float.tanhDouble, NN.NeuralNetwork.$fNNNetwork_$stanh' #)
                        GHC.Types.True
                        -> (# NN.NeuralNetwork.$fNNNetwork_$ssigmoid,
                              NN.NeuralNetwork.$fNNNetwork_$ssigmoid' #) } } } } } }) -}
8f84a713f5cbc73993390a7aefc22391
  $wgo ::
    System.Random.MWC.Gen
      (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.Any))
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Internal.Matrix.Matrix GHC.Types.Double)
    -> GHC.Prim.State# GHC.Prim.Any
    -> (# GHC.Prim.State# GHC.Prim.Any,
          Data.Vector.Vector (Internal.Matrix.Matrix GHC.Types.Double) #)
  {- Arity: 6, Strictness: <L,U(U,A,U)><S,1*U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
e07b1e9a4e040d371123ab818f2b788a
  type MutateElementF g a b = g -> a -> (g, b)
c79f29a410ebe4ea871978a29f7af3e8
  class NN n where
    create :: NN.NeuralNetwork.NNVars -> GHC.Types.IO n
    get :: NN.NeuralNetwork.NNVars
           -> n
           -> Data.Vector.Storable.Vector GHC.Types.Double
           -> Data.Vector.Storable.Vector GHC.Types.Double
    train :: NN.NeuralNetwork.NNVars
             -> n -> AI.HNN.FF.Network.Sample GHC.Types.Double -> n
    trainV :: NN.NeuralNetwork.NNVars
              -> n -> AI.HNN.FF.Network.Samples GHC.Types.Double -> n
    randomize :: System.Random.RandomGen g =>
                 NN.NeuralNetwork.NNVars -> g -> n -> (g, n)
    getWeights :: n
                  -> Data.Vector.Vector (Internal.Matrix.Matrix GHC.Types.Double)
    {-# MINIMAL create, get, trainV, randomize, getWeights #-}
07ca56f009118a64b94279955a6f4876
  type NNVars = Util.Vars.Vars
963ced9ea548612a66b2cea02bf5ef93
  type RandNet g =
    g
    -> AI.HNN.FF.Network.Network GHC.Types.Double
    -> (g, AI.HNN.FF.Network.Network GHC.Types.Double)
0784d5687a9d24737e8b1ee258d98fde
  createNetworkW ::
    NN.NeuralNetwork.NNVars
    -> GHC.Types.IO (AI.HNN.FF.Network.Network GHC.Types.Double)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                NN.NeuralNetwork.createNetworkW1
                  `cast`
                (<NN.NeuralNetwork.NNVars>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <AI.HNN.FF.Network.Network GHC.Types.Double>_R)) -}
6c54d194c4765d8819b4161815b24976
  createNetworkW1 ::
    Data.Map.Base.Map GHC.Base.String GHC.Types.Double
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          AI.HNN.FF.Network.Network GHC.Types.Double #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (r1 :: Data.Map.Base.Map
                            GHC.Base.String GHC.Types.Double)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   dimensions :: GHC.Types.Int
                   = case Util.Vars.$slookup1
                            @ GHC.Types.Double
                            Util.Vars.numberInputsS
                            r1 of wild {
                       GHC.Base.Nothing
                       -> case Data.Maybe.fromJust1 ret_ty GHC.Types.Int of {}
                       GHC.Base.Just x
                       -> case x of ds { GHC.Types.D# ds1 ->
                          case {__pkg_ccall base-4.9.0.0 rintDouble GHC.Prim.Double#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld,
                                                                          GHC.Prim.Double# #)}
                                 ds1
                                 GHC.Prim.realWorld# of wild1 { (#,#) ds2 ds3 ->
                          GHC.Types.I# (GHC.Prim.+# (GHC.Prim.double2Int# ds3) 1#) } } }
                 } in
                 let {
                   lvl37 :: GHC.Types.Int
                   = case Util.Vars.$slookup1
                            @ GHC.Types.Double
                            Util.Vars.numberHiddenS
                            r1 of wild {
                       GHC.Base.Nothing
                       -> case Data.Maybe.fromJust1 ret_ty GHC.Types.Int of {}
                       GHC.Base.Just x
                       -> case x of ds { GHC.Types.D# ds1 ->
                          case {__pkg_ccall base-4.9.0.0 rintDouble GHC.Prim.Double#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld,
                                                                          GHC.Prim.Double# #)}
                                 ds1
                                 GHC.Prim.realWorld# of wild1 { (#,#) ds2 ds3 ->
                          GHC.Types.I# (GHC.Prim.double2Int# ds3) } } }
                 } in
                 let {
                   dimensions1 :: (GHC.Types.Int, GHC.Types.Int) {- Strictness: m -}
                   = (lvl37, dimensions)
                 } in
                 let {
                   dimensions2 :: GHC.Types.Int
                   = case Util.Vars.$slookup1
                            @ GHC.Types.Double
                            Util.Vars.numberOutputsS
                            r1 of wild {
                       GHC.Base.Nothing
                       -> case Data.Maybe.fromJust1 ret_ty GHC.Types.Int of {}
                       GHC.Base.Just x
                       -> case x of ds { GHC.Types.D# ds1 ->
                          case {__pkg_ccall base-4.9.0.0 rintDouble GHC.Prim.Double#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld,
                                                                          GHC.Prim.Double# #)}
                                 ds1
                                 GHC.Prim.realWorld# of wild1 { (#,#) ds2 ds3 ->
                          GHC.Types.I# (GHC.Prim.double2Int# ds3) } } }
                 } in
                 let {
                   dimensions3 :: (GHC.Types.Int, GHC.Types.Int) {- Strictness: m -}
                   = (dimensions2, lvl37)
                 } in
                 let {
                   dimensions4 :: [(GHC.Types.Int, GHC.Types.Int)]
                   = GHC.Types.:
                       @ (GHC.Types.Int, GHC.Types.Int)
                       dimensions3
                       (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                 } in
                 let {
                   dimensions5 :: [(GHC.Types.Int, GHC.Types.Int)]
                   = GHC.Types.:
                       @ (GHC.Types.Int, GHC.Types.Int)
                       dimensions1
                       dimensions4
                 } in
                 case System.Random.MWC.withSystemRandom1
                        @ (GHC.ST.ST GHC.Prim.Any)
                        @ (Data.Vector.Vector (Internal.Matrix.Matrix GHC.Types.Double))
                        (Control.Monad.Primitive.$fPrimBaseST @ GHC.Prim.Any)
                        (\ (gen :: System.Random.MWC.GenST GHC.Prim.Any)
                           (eta1 :: GHC.Prim.State# GHC.Prim.Any)[OneShot] ->
                         case GHC.Magic.runRW#
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.Vector.Vector (Internal.Matrix.Matrix GHC.Types.Double))
                                NN.NeuralNetwork.createNetworkW2 of ds1 { (#,#) ipv1 ipv2 ->
                         case ipv2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                         NN.NeuralNetwork.$wgo gen dimensions5 ww1 ww2 ww3 eta1 } })
                          `cast`
                        (<System.Random.MWC.GenST GHC.Prim.Any>_R
                         ->_R Sym (GHC.ST.N:ST[0]
                                       <GHC.Prim.Any>_N
                                       <Data.Vector.Vector
                                          (Internal.Matrix.Matrix GHC.Types.Double)>_R))
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    ipv1
                      `cast`
                    (Sym (AI.HNN.FF.Network.N:Network[0]
                              <GHC.Types.Double>_P)) #) }) -}
0004dc326b3a19124e033838e8228a46
  createNetworkW2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector (Internal.Matrix.Matrix GHC.Types.Double) #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ (Internal.Matrix.Matrix GHC.Types.Double)
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        0#
                        (Data.Vector.Mutable.uninitialised
                           @ (Internal.Matrix.Matrix GHC.Types.Double))
                        s1
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        @ (Internal.Matrix.Matrix GHC.Types.Double)
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2
                      `cast`
                    (GHC.Prim.State#
                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                            <GHC.Prim.RealWorld>_N))_R,
                    Data.Vector.Vector
                      @ (Internal.Matrix.Matrix GHC.Types.Double)
                      0#
                      0#
                      ipv3 #) } }) -}
instance NN.NeuralNetwork.NN [AI.HNN.FF.Network.Network]
  = NN.NeuralNetwork.$fNNNetwork
"SPEC/NN.NeuralNetwork length @ Vector @ (Vector Double)" [ALWAYS] forall ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                         Data.Vector.Vector
                                                                                         (Data.Vector.Storable.Vector
                                                                                            GHC.Types.Double))
  Data.Vector.Generic.length @ Data.Vector.Vector
                             @ (Data.Vector.Storable.Vector GHC.Types.Double)
                             $dVector
  = NN.NeuralNetwork.$sinit_$slength
"SPEC/NN.NeuralNetwork length @ Vector @ (Vector Double,
                                         Matrix Double)" [ALWAYS] forall ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                                                                 Data.Vector.Vector
                                                                                                                                                 (Data.Vector.Storable.Vector
                                                                                                                                                    GHC.Types.Double,
                                                                                                                                                  Internal.Matrix.Matrix
                                                                                                                                                    GHC.Types.Double))
  Data.Vector.Generic.length @ Data.Vector.Vector
                             @ (Data.Vector.Storable.Vector GHC.Types.Double,
                                Internal.Matrix.Matrix GHC.Types.Double)
                             $dVector
  = NN.NeuralNetwork.$slength
"SPEC/NN.NeuralNetwork sigmoid @ Double" [ALWAYS] forall ($dFloating :: GHC.Float.Floating
                                                                          GHC.Types.Double)
  AI.HNN.FF.Network.sigmoid @ GHC.Types.Double $dFloating
  = NN.NeuralNetwork.$fNNNetwork_$ssigmoid
"SPEC/NN.NeuralNetwork sigmoid' @ Double" [ALWAYS] forall ($dFloating :: GHC.Float.Floating
                                                                           GHC.Types.Double)
  AI.HNN.FF.Network.sigmoid' @ GHC.Types.Double $dFloating
  = NN.NeuralNetwork.$fNNNetwork_$ssigmoid'
"SPEC/NN.NeuralNetwork tanh' @ Double" [ALWAYS] forall ($dFloating :: GHC.Float.Floating
                                                                        GHC.Types.Double)
  AI.HNN.FF.Network.tanh' @ GHC.Types.Double $dFloating
  = NN.NeuralNetwork.$fNNNetwork_$stanh'
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

