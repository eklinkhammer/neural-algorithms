
==================== FINAL INTERFACE ====================
2017-02-12 01:33:44.59163 UTC

interface neural-algorithms-0.1.0.0-G4cKiu8m1A6JbAFI6F3DlP:Util.MyList 8001
  interface hash: 1b0d94fe88b9420a6dce726b396314cf
  ABI hash: ac798f621030c664411a7e931949ac3f
  export-list hash: 1c981ed2ccb61c31f2f0bdeb4e369a5f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 51bdbb7da50d74bac600f8086fd85c9a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Util.MyList.removeIndices
  Util.MyList.selectIndices
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
e075ba764cf2a46215ef3cefe3a5920e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Util.MyList.$trModule2
                   Util.MyList.$trModule1) -}
ec17ac4966e317340e6295abe1d4ee7f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Util.MyList"#) -}
9e573aea24c3e287d0a229c5071459d1
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "neural-algorithms-0.1.0.0-G4cKiu8m1A6JbAFI6F3DlP"#) -}
742f501b190ec44222610be6ad9f2350
  del :: [(a, GHC.Types.Int)] -> [GHC.Types.Int] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
bbeb4dbc08a1792357e9b5b72031a55c
  removeIndices :: [a] -> [GHC.Types.Int] -> [a]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (xs :: [a]) (is :: [GHC.Types.Int]) ->
                 Util.MyList.del
                   @ a
                   (GHC.Base.build
                      @ (a, GHC.Types.Int)
                      (\ @ b1
                         (c :: (a, GHC.Types.Int) -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.List.foldr2
                         @ a
                         @ GHC.Types.Int
                         @ b1
                         (GHC.List.zipFB @ a @ GHC.Types.Int @ b1 @ b1 c)
                         n
                         xs
                         Util.MyList.removeIndices1))
                   is) -}
463acfc55e2bb1ba8311366529b7eb7f
  removeIndices1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0# 9223372036854775807#) -}
b011632379489a271fd94c7da87577fd
  sel :: [(a, GHC.Types.Int)] -> [GHC.Types.Int] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
8c5701478f7f0c027195c14bf88381ae
  selectIndices :: [a] -> [GHC.Types.Int] -> [a]
  {- Arity: 2, Strictness: <L,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (xs :: [a]) (is :: [GHC.Types.Int]) ->
                 Util.MyList.sel
                   @ a
                   (GHC.Base.build
                      @ (a, GHC.Types.Int)
                      (\ @ b1
                         (c :: (a, GHC.Types.Int) -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.List.foldr2
                         @ a
                         @ GHC.Types.Int
                         @ b1
                         (GHC.List.zipFB @ a @ GHC.Types.Int @ b1 @ b1 c)
                         n
                         xs
                         Util.MyList.removeIndices1))
                   is) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

