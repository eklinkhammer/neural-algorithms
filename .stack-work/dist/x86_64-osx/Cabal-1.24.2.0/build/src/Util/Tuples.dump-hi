
==================== FINAL INTERFACE ====================
2017-02-12 01:33:44.656446 UTC

interface neural-algorithms-0.1.0.0-G4cKiu8m1A6JbAFI6F3DlP:Util.Tuples 8001
  interface hash: b428feb77528125267101ae6d0ee7fdb
  ABI hash: 75b9d7fe6493eeec59d82faeda423e8f
  export-list hash: 0afb4b77145714426bd62625c80b8dd5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 51bdbb7da50d74bac600f8086fd85c9a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Util.Tuples.applyFst
  Util.Tuples.applySnd
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
1a805ef0844aaf0e42fe49a845a8d82e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Util.Tuples.$trModule2
                   Util.Tuples.$trModule1) -}
90ba92d24bd615b6ef6285dc02d830e3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Util.Tuples"#) -}
5a95bfb3d5d047fa7163e9fc985d7fc1
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "neural-algorithms-0.1.0.0-G4cKiu8m1A6JbAFI6F3DlP"#) -}
ad0b6150bb8a4c703faa6262cdd56fd5
  applyFst :: (a -> c) -> (a, b) -> (c, b)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ c @ b (f :: a -> c) (ds :: (a, b)) ->
                 case ds of wild { (,) x y -> (f x, y) }) -}
036cf597aa51c61ef48811bcdbb090bc
  applySnd :: (b -> c) -> (a, b) -> (a, c)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ b @ c @ a (f :: b -> c) (ds :: (a, b)) ->
                 case ds of wild { (,) x y -> (x, f y) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

