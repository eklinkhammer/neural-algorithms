
==================== FINAL INTERFACE ====================
2017-02-12 01:36:01.053566 UTC

interface neural-algorithms-0.1.0.0-G4cKiu8m1A6JbAFI6F3DlP:CCEA.EA 8001
  interface hash: 00774412b356396256bd5bc726f2acc2
  ABI hash: 42ab5abb2c54c89519e5419f580f2584
  export-list hash: 34832b985ee07e617d1837c2d18a2f19
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: db84b2549858666a400c84cb900ff8fa
  sig of: Nothing
  used TH splices: False
  where
exports:
  CCEA.EA.bestHalf
  CCEA.EA.elitist
  CCEA.EA.evolve
  CCEA.EA.evolveN
  CCEA.EA.fitnessProp
  CCEA.EA.mutateWeights
  CCEA.EA.notElitist
  CCEA.EA.tournament
  CCEA.EA.truncation
  CCEA.EA.BreedingStrategy
  CCEA.EA.EA{CCEA.EA.EA}
  CCEA.EA.FitnessFunction
  CCEA.EA.SelectionStrategy
module dependencies: Matrix.Traversable NN.NeuralNetwork
                     RandomUtil.Random Util.MyList Util.Tuples Util.Vars
package dependencies: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ
                      hnn-0.3@hnn-0.3-FFj4by4N6nNKK66rtK9l9v integer-gmp-1.0.0.1
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      mwc-random-0.13.5.0@mwc-random-0.13.5.0-9fVrEibWMFm8DwR7HO0MWX
                      normaldistribution-1.1.0.3@normaldistribution-1.1.0.3-5Tmsx8i18mO3UhoQolUXZE
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      random-shuffle-0.0.4@random-shuffle-0.0.4-LfeDYNPfwrQ2o9p6tw2M9l
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3
                      zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV
orphans: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov:Control.Monad.Random
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.CG
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Element
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Util
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Vector
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Numeric.Matrix
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Numeric.Vector
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Devel
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Matrix
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Modular
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Numeric
                         mwc-random-0.13.5.0@mwc-random-0.13.5.0-9fVrEibWMFm8DwR7HO0MWX:System.Random.MWC
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV:Codec.Compression.Zlib.Stream
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Traversable 7ce5b7ee67475ac3d03ae825b86efd9f
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  NN.NeuralNetwork a7e929c67c58528fd2ec928049b637dc
  exports: 3dbcf85690c4c5036042d02a36607d18
  NN c79f29a410ebe4ea871978a29f7af3e8
  NNVars 07ca56f009118a64b94279955a6f4876
  randomize 512c7734db77d1bd64316db1ec34408c
import  -/  RandomUtil.Random d497c5f49863a2083ee76b325f494fdc
  exports: dbc6485f6b0d59c92fc2ad3cabb52b6c
  randomStream e81408d5ea6d2a29756ec3bf0e3bffcb
import  -/  Util.MyList ac798f621030c664411a7e931949ac3f
  exports: 1c981ed2ccb61c31f2f0bdeb4e369a5f
  selectIndices 8c5701478f7f0c027195c14bf88381ae
import  -/  Util.Tuples 75b9d7fe6493eeec59d82faeda423e8f
  exports: 0afb4b77145714426bd62625c80b8dd5
  applySnd 036cf597aa51c61ef48811bcdbb090bc
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 33fad628288f84aac16d40e5a027af06
import  -/  random-shuffle-0.0.4@random-shuffle-0.0.4-LfeDYNPfwrQ2o9p6tw2M9l:System.Random.Shuffle 3f5e54b2036bc5b8dc7743ffe99c3f89
e2226d02e851b3b9e2ef2b1551e54ab7
  $tc'EA :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   140435539191159554##
                   3028151089480396860##
                   CCEA.EA.$trModule
                   CCEA.EA.$tc'EA1) -}
21c3d71ee888f4cae9bdf65426c08ba7
  $tc'EA1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EA"#) -}
74fa4f89d3f353ace06d3de7016e46cb
  $tcEA :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9068481181356257486##
                   6477347323711576189##
                   CCEA.EA.$trModule
                   CCEA.EA.$tcEA1) -}
b55d470d7dd31958b1c2f452e46a459d
  $tcEA1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "EA"#) -}
7f7be47ab66b707151ef937489145bde
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CCEA.EA.$trModule2
                   CCEA.EA.$trModule1) -}
40d12e2758eaef0aeb2765fbcebcab5a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CCEA.EA"#) -}
dc5de9d17d31da587cfd93665e23678d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "neural-algorithms-0.1.0.0-G4cKiu8m1A6JbAFI6F3DlP"#) -}
0777ae464966c8532174adb0b556d045
  $wbestHalf :: g -> [(i, GHC.Types.Double)] -> (# g, [i] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ @ i @ g (w :: g) (w1 :: [(i, GHC.Types.Double)]) ->
                 CCEA.EA.$wtruncation
                   @ i
                   @ g
                   (case GHC.List.$wlenAcc
                           @ (i, GHC.Types.Double)
                           w1
                           0# of ww2 { DEFAULT ->
                    case GHC.Classes.divInt# ww2 2# of ww4 { DEFAULT ->
                    GHC.Types.I# ww4 } })
                   w
                   w1) -}
d609887f111ba3090b7b4e4693e234e6
  $wevolve ::
    g
    -> CCEA.EA.Population i
    -> CCEA.EA.SelectionStrategy i g
    -> CCEA.EA.FitnessFunction i
    -> CCEA.EA.BreedingStrategy i g
    -> (# g, CCEA.EA.EA i g #)
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ g
                   @ i
                   (w :: g)
                   (ww :: CCEA.EA.Population i)
                   (ww1 :: CCEA.EA.SelectionStrategy i g)
                   (ww2 :: CCEA.EA.FitnessFunction i)
                   (ww3 :: CCEA.EA.BreedingStrategy i g) ->
                 let {
                   ds :: (g, [i])
                   = let {
                       ds1 :: (g, [i]) = ww3 w ww
                     } in
                     ww1
                       (case ds1 of wild { (,) g' offspring -> g' })
                       (case ds1 of wild { (,) g' offspring ->
                        GHC.List.zip
                          @ i
                          @ GHC.Types.Double
                          offspring
                          (GHC.Base.map @ i @ GHC.Types.Double ww2 offspring) })
                 } in
                 (# case ds of wild { (,) g'' selected -> g'' },
                    CCEA.EA.EA
                      @ i
                      @ g
                      (case ds of wild { (,) g'' selected -> selected })
                      ww1
                      ww2
                      ww3 #)) -}
ede8a163932d1dea75ac478824d3f14f
  $wevolveN ::
    GHC.Prim.Int# -> g -> CCEA.EA.EA i g -> (# g, CCEA.EA.EA i g #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U(U,U,U,U)>,
     Inline: [0] -}
94684c6019555f243dbc07d815ec5485
  $wfitnessProp ::
    System.Random.RandomGen g =>
    g -> [(i, GHC.Types.Double)] -> (# g, [i] #)
  {- Arity: 3,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,U><L,U>,
     Inline: [0] -}
5db8cd01868ad99161b401902c8d22ef
  $wmutateWeights ::
    (System.Random.RandomGen g, NN.NeuralNetwork.NN n) =>
    NN.NeuralNetwork.NNVars -> g -> [n] -> (# g, [n] #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,1*U(A,A,A,A,1*C1(C1(U)),A)><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ g
                   @ n
                   (w :: System.Random.RandomGen g)
                   (w1 :: NN.NeuralNetwork.NN n)
                   (w2 :: NN.NeuralNetwork.NNVars)
                   (w3 :: g)
                   (w4 :: [n]) ->
                 let {
                   f :: g -> n -> (g, n) = NN.NeuralNetwork.randomize @ n w1 @ g w w2
                 } in
                 letrec {
                   $wgo :: [n] -> g -> (# g, [n] #)
                     {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                   = \ (w5 :: [n]) (w6 :: g) ->
                     case w5 of wild {
                       [] -> (# w6, GHC.Types.[] @ n #)
                       : y ys
                       -> let {
                            ds1 :: (g, n) = f w6 y
                          } in
                          let {
                            ds3 :: (g, [n])
                            = case $wgo
                                     ys
                                     (case ds1 of wild1 { (,) s' v -> s' }) of ww { (#,#) ww1 ww2 ->
                              (ww1, ww2) }
                          } in
                          (# case ds3 of wild1 { (,) s'' v -> s'' },
                             GHC.Types.:
                               @ n
                               (case ds1 of wild1 { (,) s' v -> v })
                               (case ds3 of wild1 { (,) s'' v -> v }) #) }
                 } in
                 $wgo w4 w3) -}
993d5cb1a278e7d39aaae6c5a414147f
  $wtournament ::
    System.Random.RandomGen g =>
    GHC.Types.Int -> g -> [(i, GHC.Types.Double)] -> (# g, [i] #)
  {- Arity: 4,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
4ec699c5c25256a1c3ae0b4ec60ba5c5
  $wtruncation ::
    GHC.Types.Int -> g -> [(i, GHC.Types.Double)] -> (# g, [i] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ i
                   @ g
                   (w :: GHC.Types.Int)
                   (w1 :: g)
                   (w2 :: [(i, GHC.Types.Double)]) ->
                 (# w1,
                    case w of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0# y) of wild {
                      GHC.Types.False -> GHC.Types.[] @ i
                      GHC.Types.True
                      -> CCEA.EA.bestHalf3
                           @ i
                           (GHC.List.reverse1
                              @ (i, GHC.Types.Double)
                              (GHC.Base.map
                                 @ (GHC.Types.Double, (i, GHC.Types.Double))
                                 @ (i, GHC.Types.Double)
                                 (Data.Tuple.snd @ GHC.Types.Double @ (i, GHC.Types.Double))
                                 (Data.OldList.sortBy
                                    @ (GHC.Types.Double, (i, GHC.Types.Double))
                                    (CCEA.EA.bestHalf2 @ i)
                                    (GHC.Base.map
                                       @ (i, GHC.Types.Double)
                                       @ (GHC.Types.Double, (i, GHC.Types.Double))
                                       (CCEA.EA.bestHalf1 @ i)
                                       w2)))
                              (GHC.Types.[] @ (i, GHC.Types.Double)))
                           y } } #)) -}
83384c2d3c26f6568772c92ff85938f8
  type BreedingStrategy i g = g -> [i] -> (g, [i])
68c1c4d6c9ca0bd6294997514871c715
  data EA i g
    = EA (CCEA.EA.Population i)
         (CCEA.EA.SelectionStrategy i g)
         (CCEA.EA.FitnessFunction i)
         (CCEA.EA.BreedingStrategy i g)
1c31628c0bfb28c9135306aabd01492d
  type FitnessFunction i = i -> GHC.Types.Double
94d48ca30953e2c878ae1fdc93398661
  type Population i = [i]
7ab12a597c70731a0c2b9245e4bbb7d2
  type SelectionStrategy i g =
    g -> [(i, GHC.Types.Double)] -> (g, [i])
f729595416d5d84254efcec118b6fd82
  bestHalf :: CCEA.EA.SelectionStrategy i g
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ i @ g (w :: g) (w1 :: [(i, GHC.Types.Double)]) ->
                 case CCEA.EA.$wbestHalf @ i @ g w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
a07469e407a199d0d3c32ccc22cd31f8
  bestHalf1 ::
    (i, GHC.Types.Double) -> (GHC.Types.Double, (i, GHC.Types.Double))
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ i (x :: (i, GHC.Types.Double)) ->
                 case x of wild { (,) ds1 y ->
                 case y of y1 { GHC.Types.D# ipv -> (y1, wild) } }) -}
842c30ffeca2b90730346ef9e7eaffe6
  bestHalf2 ::
    (GHC.Types.Double, (i, GHC.Types.Double))
    -> (GHC.Types.Double, (i, GHC.Types.Double)) -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ i
                   (x :: (GHC.Types.Double, (i, GHC.Types.Double)))
                   (y :: (GHC.Types.Double, (i, GHC.Types.Double)))[OneShot] ->
                 case x of wild { (,) x1 ds1 ->
                 case x1 of wild1 { GHC.Types.D# x2 ->
                 case y of wild2 { (,) x3 ds2 ->
                 case x3 of wild3 { GHC.Types.D# y1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<## x2 y1) of wild4 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x2 y1) of wild5 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.LT } } } } }) -}
b24ef981d3facf9c1b7923852c95349d
  bestHalf3 :: [(i, GHC.Types.Double)] -> GHC.Prim.Int# -> [i]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: [0] -}
4e0eae5dc21232dc8fc4a9aadc1b8371
  elitist ::
    CCEA.EA.BreedingStrategy i g -> CCEA.EA.BreedingStrategy i g
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U(U,U)))><L,U><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ i
                   @ g
                   (strat :: CCEA.EA.BreedingStrategy i g)
                   (g1 :: g)
                   (parents :: [i]) ->
                 let {
                   ds :: (g, [i]) = strat g1 parents
                 } in
                 (case ds of wild { (,) g' offspring -> g' },
                  case ds of wild { (,) g' offspring ->
                  GHC.Base.augment
                    @ i
                    (\ @ b (c :: i -> b -> b)[OneShot] (n :: b)[OneShot] ->
                     GHC.Base.foldr @ i @ b c n offspring)
                    parents })) -}
432b2b804ac45a773ce96f119e10e088
  evolve :: g -> CCEA.EA.EA i g -> (g, CCEA.EA.EA i g)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ g @ i (w :: g) (w1 :: CCEA.EA.EA i g) ->
                 case w1 of ww { CCEA.EA.EA ww1 ww2 ww3 ww4 ->
                 case CCEA.EA.$wevolve
                        @ g
                        @ i
                        w
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,#) ww6 ww7 ->
                 (ww6, ww7) } }) -}
2e925ba49af4a85ea80435698bf86cd2
  evolveN ::
    System.Random.RandomGen g =>
    GHC.Types.Int -> g -> CCEA.EA.EA i g -> (g, CCEA.EA.EA i g)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><S(S),1*U(1*U)><L,U><L,U(U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ g
                   @ i
                   (w :: System.Random.RandomGen g)
                   (w1 :: GHC.Types.Int)
                   (w2 :: g)
                   (w3 :: CCEA.EA.EA i g) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case CCEA.EA.$wevolveN @ g @ i ww1 w2 w3 of ww2 { (#,#) ww3 ww4 ->
                 (ww3, ww4) } }) -}
b8795258357b93b9a493b086a9a654b1
  fitnessProp ::
    System.Random.RandomGen g => CCEA.EA.SelectionStrategy i g
  {- Arity: 3,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ g
                   @ i
                   (w :: System.Random.RandomGen g)
                   (w1 :: g)
                   (w2 :: [(i, GHC.Types.Double)]) ->
                 case CCEA.EA.$wfitnessProp @ g @ i w w1 w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
4dc98777f1fd63c8d93d2f6060423623
  mutateWeights ::
    (System.Random.RandomGen g, NN.NeuralNetwork.NN n) =>
    NN.NeuralNetwork.NNVars -> CCEA.EA.BreedingStrategy n g
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,1*U(A,A,A,A,1*C1(C1(U)),A)><L,U><L,U><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ g
                   @ n
                   (w :: System.Random.RandomGen g)
                   (w1 :: NN.NeuralNetwork.NN n)
                   (w2 :: NN.NeuralNetwork.NNVars)
                   (w3 :: g)
                   (w4 :: [n]) ->
                 case CCEA.EA.$wmutateWeights
                        @ g
                        @ n
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
f6d318dbeb00a4412e757f4f9458b1ee
  notElitist ::
    CCEA.EA.BreedingStrategy i g
    -> CCEA.EA.BreedingStrategy i g -> CCEA.EA.BreedingStrategy i g
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,U)))><L,U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ i
                   @ g
                   (w :: CCEA.EA.BreedingStrategy i g)
                   (w1 :: CCEA.EA.BreedingStrategy i g)
                   (w2 :: g)
                   (w3 :: [i]) ->
                 let {
                   ds :: (g, [i]) = w w2 w3
                 } in
                 let {
                   ds1 :: (g, [i])
                   = w1 (case ds of wild { (,) g' offspring1 -> g' }) w3
                 } in
                 (case ds1 of wild { (,) g'' offspring2 -> g'' },
                  case ds of wild { (,) g' offspring1 ->
                  GHC.Base.++
                    @ i
                    offspring1
                    (case ds1 of wild1 { (,) g'' offspring2 -> offspring2 }) })) -}
6b24e2b734c3ced6a8cd897a2d20b74c
  tournament ::
    System.Random.RandomGen g =>
    GHC.Types.Int -> CCEA.EA.SelectionStrategy i g
  {- Arity: 4,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,U(U)><L,U><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ g
                   @ i
                   (w :: System.Random.RandomGen g)
                   (w1 :: GHC.Types.Int)
                   (w2 :: g)
                   (w3 :: [(i, GHC.Types.Double)]) ->
                 case CCEA.EA.$wtournament
                        @ g
                        @ i
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
46c5ff83256f4d6953b2b3ed863359cf
  truncation :: GHC.Types.Int -> CCEA.EA.SelectionStrategy i g
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U><L,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ i
                   @ g
                   (w :: GHC.Types.Int)
                   (w1 :: g)
                   (w2 :: [(i, GHC.Types.Double)]) ->
                 case CCEA.EA.$wtruncation @ i @ g w w1 w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

